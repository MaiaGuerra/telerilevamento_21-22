# 22/04/2022 LAND COVER (recuperata da registrazioni perchè stavo a San Casciano)

# codice per generare mappe sulla copertura del suolo (land cover, naturale, antropizzata, ecc) da immagini satellitari

library(raster)
library(RStoolbox) # (per la classificazione)

setwd("C:/lab/")

# importazione immagine Landsat del Rio Peixoto in Brasile nel 1992 (già usata in una lezione precedente)

l92 <- brick("defor1_.jpg") # l92 = immagine Landsat del 1992 
l92

plotRGB(l92, 1, 2, 3, stretch="lin") # abbiamo scritto 1, 2, 3 senza definire che siano r, g e b perchè di default la funzione li legge in modo corretto
# la vegetazione riflette molto nel vicino infrarosso quindi sappiamo che nell'immagine il rosso è il NIR (Near InfraRed) e corrisponde alla copertura vegetale

# importazione immagine Landsat del Rio Peixoto in Brasile nel 1992
l06 <- brick("defor2_.jpg")

# creazione del multiframe con le due immagini (con 2 righe e 1 colonna)
par(mfrow=c(2,1))
plotRGB(l92, 1, 2, 3, stretch="lin")
plotRGB(l06, 1, 2, 3, stretch="lin")

# i pixel dell'immagine vengono classificati campionandone una parte in modo casuale nel seguente modo:
# immaginando un grafico con la banda del rosso su x e il NIR su y
# i pixel rossi corrisponderanno ad alti valori di NIR e bassi di rosso (in alto a sx del grafico) -> vegetazione
# i pixel blu/grigi a bassi valori di NIR e alti valori nel rosso (in basso a dx) -> aree agricole/antropizzate
# tutti gli altri pixel che non rientrano nelle due categorie precedenti vengono associati in base alla distanza minima alla nuvola di pixel più vicina
# (principio della maximum likelihood) -> per calibrare il modello iniziale


install.packages("ggplot2") # pacchetto per la creazione di grafici più eleganti
library(ggplot2)
ggRGB(l92, 1, 2, 3, stretch="lin") # crea un grafico come plotRGB (gli argomenti infatti sono identici) ma più carino
ggRGB(l06, 1, 2, 3, stretch="lin")

# per unire le due immagini usiamo invece il pacchetto "patchwork"

install.packages("patchwork") # permette di creare multiframes in modo più semplice rispetto a prima con la funzione "par"
library(patchwork)

p1 <- ggRGB(l92, 1, 2, 3, stretch="lin")
p2 <- ggRGB(l06, 1, 2, 3, stretch="lin")

p1+p2 # funziona come par ma semplicemente con + (visualizza p1 a fianco a p2)

p1/p2 # (visualizza p1 sopra p2)

# classifichiamo le immagini satellitari
l92c <- unsuperClass(l92, nClasses = 2) # ci restituisce il modello creato sull'immagine
l92c

plot(l92c$map) # plottiamo la mappa del modello
# in questo caso:
# classe 1 = foresta
# classe 2 = zone agricole/antropizzate e acqua
# (possono essere anche invertiti da un pc a un altro a seconda di come la funzione ha assegnato i clori alle 2 classi)

# costruiamo il modello e visualizziamo la mappa anche dell'altra immagine
l06c <- unsuperClass(l06, nClasses = 2)
plot(l06c$map)
# anche in questa mappa i colori delle 2 classi sono gli stessi per i corrispettivi elementi

# calcoliamo la frequenza dei pixel di entrambe le immagini per capire come variano negli anni
freq(l92c$map) # calcola il numero di pixel per ogni classe dell'immagine del 1992
# restituisce
# 306449 pixel di classe 1 (foresta)
# 34843 pixel di classe 2 (zone antropizzate e acqua)
# dal modello di unsuperClass i pixel totali per quest'immagine sono 341292 (infatti 34843 + 306449 = 341292)

freq(l06c$map) # calcola il numero di pixel per ogni classe dell'immagine del 2006
# restituisce
# 178259 pixel di classe 1 (foresta)
# 164467 pixel di classe 2 (zone antropizzate e acqua)
# dal modello di unsuperClass i pixel totali per quest'immagine sono 342726 (infatti 178259 + 164467 = 342726)





# 28/04/2022 SECONDA PARTE LAND COVER RIO PEIXOTO (recuperata da registrazioni perchè eravamo in escursione)

library(raster)
library(ggplot2)
library(patchwork)
library(RStoolbox)

setwd("C:/lab/")

l92 <- brick("defor1_.jpg") # carichiamo le due immagini (di 3 bande, NIR, rosso e verde) del Rio pixoto nel 1992 e nel 2006
l06 <- brick("defor2_.jpg")

ggRGB(l92, 1, 2, 3, stretch="lin")
ggRGB(l06, 1, 2, 3, stretch="lin")

# per vedere la differenza di copertura vegetale tra il 92 e il 2006 potremmo calcolare la proporzione di foresta presente 
# nelle due immagini utilizzando il numero di pixel delle due classi (che distinguono la foresta dalle zone antropizzate)
# e il numero totale di pixel presenti nelle due immagini satellitari

l92 # dalle informazioni che ci da la funzione brick sulla prima immagine il numero totale di pixe è 341292
tot92 <- 341292 # assegniamo il numero totale di pixel a una variabile
prop_forest_92 <- 306449/tot92 # dalla divisione in classi la classe 1 (foresta) risultava di 306449 pixel
# prop_forest_92 = 0.8979085
perc_forest_92 <- prop_forest_92 * 100 # moltiplichiamo per 100 per avere la percentuale
# perc_forest_92 = 89.79085
prop_agr_92 <- 34843/tot92 # calcoliamo anche la proporzione di aree agricole nel 92
# prop_agr_92 = 0.1020915 
perc_agr_92 <- prop_agr_92 * 100 # a calcoliamo anche la percentuale
# perc_agr_92 = 10.20915

tot06 <- 342726 # dalle informazioni della funzione brik troviamo il totale dei pixel dell'immagine
prop_forest_06 <- 178259/tot06 # calcoliamo quindi anche la percentuale di foresta nel 2006 sapendo quanti sono
# i pixel della classe 1 (178259, dal modello creato da unsuperClass)
# prop_forest_06 = 0.520121
perc_forest_06 <- prop_forest_06 * 100 # calcoliamo la percentuale di foresta nel 2006
# perc_forest_06 = 52.0121
perc_agr_06 <- 100 - perc_forest_06 # e infine la percentuale di zone agricole/antropizzate nel 2006
# perc_agr_06 = 47.9879


# COSTRUZIONE DI UN DATAFRAME

# ISTANZE = celle della tabella (dataframe) che contengono i dati

class <- c("Forest", "Agriculture") # creaiamo i campi del dataframe (colonne) con un vettore (class)
percent_1992 <- c(89.79085, 10.20915) # creiamo le istanze (valori nelle celle del dataframe) sempre con dei vettori
percent_2006 <- c(52.0121, 47.9879)

multitemporal <- data.frame(class, percent_1992, percent_2006) # costruiamo il dataframe con l'apposita funzione
# e lo chiamiamo multitemporal

multitemporal
View(multitemporal) # apre la tabella del dataframe appena creato

# utilizziamo la funzione ggplot che di default crea un oggetto vuoto, si usa per crare output grafici partendo dai 
# dati inseriti nella funzione
# struttura dellla funzione: ggplot(df, aes(x, y, other aesthetics))
# df = dataframe
# aes = aesthetics (colonne)

# costruiamo un grafico a barre con i dati del 1992
ggplot(multitemporal, aes(x=class, y=percent_1992, color=class)) + # scritta solo così apre un ggplot vuoto
geom_bar(stat="identity", , fill="white") # si aggiunge la funzione geom_bar per creare un grafico a barre
# stat="identity" definisce che le statistiche che inseriamo non sono da elaborare (ad esempio calcolandone la media
# come solitamente fa la funzione) ma sono delle identità, perciò uguali a come le inseriamo

# facciamo la stessa cosa coi dati del 2006
ggplot(multitemporal, aes(x=class, y=percent_2006, color=class)) +
  geom_bar(stat="identity", , fill="white")

# in questo modo abbiamo ricavato dati e grafici a partire da immagini satellitari

# per esportare i grafici creati come pdf
pdf("percentages_2006.pdf")
ggplot(multitemporal, aes(x=class, y=percent_2006, color=class)) +
  geom_bar(stat="identity", , fill="white")
dev.off()

pdf("percentages_1992.pdf")
ggplot(multitemporal, aes(x=class, y=percent_1992, color=class)) +
  geom_bar(stat="identity", , fill="white")
dev.off()







